name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  gitleaks_scan:
    name: Gitleaks Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v1.0.3
        with:
          config_path: ".gitleaks.toml"  # Adjust path to your gitleaks config

  sonar_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Add your SonarQube token in GitHub secrets
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  docker_build_push:
    name: Build, Scan, Push Docker Image
    runs-on: ubuntu-latest
    needs: [gitleaks_scan, sonar_analysis]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Set Docker tag
        run: echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: 'table'
          severity: 'HIGH,CRITICAL'

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

  deploy_k8s_argocd:
    name: Deploy to Kubernetes Cluster
    runs-on: ubuntu-latest
    needs: [docker_build_push]

    steps:
      - name: Install ArgoCD CLI
        run: curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.5.0/argocd-linux-amd64 && chmod +x /usr/local/bin/argocd

      - name: ArgoCD Login
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

      - name: Sync Application with ArgoCD
        run: |
          argocd app sync my-k8s-app --retry-strategy fallback

      - name: Wait for ArgoCD deployment
        run: |
          argocd app wait my-k8s-app --timeout 300

      - name: Check Deployment Status and Rollback on Failure
        run: |
          if ! argocd app health my-k8s-app | grep -q 'Healthy'; then
            echo "Deployment failed! Rolling back..."
            argocd app rollback my-k8s-app
            exit 1
          fi

